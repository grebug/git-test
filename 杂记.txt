mysql事务隔离级别？








BigInteger和BigDecimal

数组是协变且可以具体化的，泛型是不可变的且可以被擦除的。因此，数组提供了运行时的类型安全，但是没有编译时的类型安全。

泛型方法：public static <T extends Comparable<? super T>> T max(List<? extends T> list)




第57条：只针对异常的情况才使用异常
第58条：对可恢复的情况使用受检异常，对编程错误使用运行时异常
	三种可抛出结构：受检的异常、运行时异常和错误。
第59条：避免不必要地使用受检的异常
第60条：优先使用标准的异常
第61条：抛出与抽象相对应的异常


第66条：同步访问共享的可变数据
	synchronized可修饰方法或代码块。
	Java语言规范保证读或写一个变量是原子的(atomic，long或double除外)，但它并不保证一个线程写入的值对于另一个线程将是可见的。
	volatile修饰相应的变量可解决上面的问题，虽然不执行互斥访问，但它可以保证任何一个线程在读取该域的时候都将看到最近刚刚被写入的值。
	java.util.concurrent.atomic包中的类AtomicLong支持原子(自增)操作。
第67条：避免过度同步
	不要从同步区域内部调用外来方法。
	要尽量限制同步区域内部的工作量。
	分拆锁(locking splitting)，分离锁(lock striping)，非阻塞并发控制(nonblocking)。
第68条：executor和task优先于线程
	Java 1.5中新增了java.util.concurrent包，其中包含Executor Framework，很灵活的基于接口的任务执行工具。
	ExecutorService executor=Executors.newSingleThreadExecutor();
	executor.execute(runnable);
	executor.shutdown();
	
    concurrent包常用类：
	ThreadPoolExecutor最大限度控制线程池操作。
	Executors.newCachedThreadPool轻负载情况下使用。
	Executors.newFixedThreadPool大负载情况下使用。
	
    任务：Runnable和Callable(会返回值)。
	执行任务的通用机制是executor service。
	Executor Framework所做的工作是执行，犹如Collections Framework所做的工作是聚集。
	代替java.util.Timer(只用一个线程执行任务)的ScheduledThreadPoolExecutor(支持多个线程)。
第69条：并发工具优先于wait和notify
	java.util.concurrent中更高级的工具分成三类：Executor Framework、并发集合(为标准的集合接口如：List、Queue和Map等提供高性能的并发实现，内部自己管理同步)以及同步器(Synchronizer)。
	ConcurrentHashMap优于Collections.synchronizedMap或者Hashtable，优于外部同步集合。
	BlockingQueue通过阻塞操作扩展了Queue接口，可用于工作队列(work queue)，也称生产者-消费者队列(producer-consumer queue)。大多数ExecutorService实现（包括ThreadPoolExecutor）都是用BlockingQueue。
    
    同步器是一些使线程能够等待另一个线程的对象，常用的有CountDownLatch和Semaphore，较不常用的有CyclicBarrier和Exchanger。
    倒计数锁存器：CountDownLatch(int)，一次性障碍，构造器中int参数指允许所有在等待的线程被处理之前，必须调用countDown方法的次数。（await方法等待）











Python:
	标准库模块：keyword(keyword.kwlist)，sys(sys.argv,sys.path)，builtins
	导入：import或from...import...或import...as...
	反斜杠\实现多行语句，(),[],{}中的多行语句不需要反斜杠\。
	
	数据类型：整数，长整数(python2版本)，浮点数和复数。
	
	字符串：单引号和双引号相同。三引号指定多行字符串。转义符\。去除转义在字符串前加r或R。unicode字符串加前缀u或U。不可变。字面级联不需加号+。*接数字类似于乘法，字符串复制多次。无字符类型，一个字符就是长度为1的字符串。
	
	输入输出：input(),print("默认自动换行，添加end后缀取消换行",end="",sep="@").
	同一行多条语句使用分号;分割，默认不需用;结尾。
	缩进控制代码块，称之为代码组。
	函数首部三引号指定函数的文档字符串，使用help(max)函数或max.__doc__可以打印或获取该信息。
	
	变量就是变量，它没有类型，我们所说的"类型"是变量所指的内存中对象的类型。
	
	六个标准数据类型：Number，String（'',""），List（[],可变，append(),pop()等方法），Tuple（(),不可变，字符串可看做特殊的元组），Set（{ }或set(接受可迭代参数)，无序不重复，空集合必须使用set()，而不能使用{}，因为{}用于创建空字典），Dictionary（{}或dict(可接受键值对序列参数)方法keys(),values(),clear()，键必须使用不可变类型）。
	Number：int、float、bool、complex。
	
	内置type()函数可查询变量所指对象类型。isinstance(a,int)判断变量所指对象类型。
	type()为精确类型，而isinstance()支持继承链。
	bool值True和False相当于常量定义1和0，可和数字相加。
	del语句可删除对象引用。
	整数两种除法操作：/得到浮点数，//得到截断的整数。
	
	string、list、tuple都属于sequence序列。
	数据类型转换：int(x,[,base]),float(x),complex(real[,imag]),str(x),repr(x),eval(str),tuple(s),list(s),set(s),dict(d),frozenset(s),chr(x),unichr(x),ord(x),hex(x),oct(x).
	身份运算符：x is y等价于id(x)==id(y).

	使用了 yield 的函数被称为生成器(generator)。生成器是一个返回迭代器的函数。每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回yield的值。并在下一次执行 next()方法时从当前位置继续运行。

	函数参数：必需，关键字，默认，不定长 参数。
	函数参数以*开头，作为元组接受变长参数。
	lambda表达式 用来创建匿名函数 。

	变量作用域：局部L，闭包函数外的函数E，全局G，内建B。
	global和nonlocal用于内部作用域修改外部作用域的变量。

	列表推导式：表达式后跟有零到多个 for 或 if 子句。


















========= Suggest 计划  & 城市列表计划 =========
前期目标：搜索无结果降为0（最初 9%）
原因：
       1、匹配逻辑问题
       2、基础数据不全问题
计划：
       1、一期搜索无结果从9%降低到了8%（7月份上线）
实现新工程、拼音匹配、多音字、错别字匹配
       2、二期搜索无结果从8%降低到 7%（8月16号上线）
编辑路径算法，汉字，拼音路径转化，计算匹配结果和输入的相似度评分，取top返回
       2.1：客户端加载时间降低成0（8月版本）
       2.2：分析客户端的用户数据，确定后期降低无结果，提高命中率的方向（8月11号之前）
       2.3：基础数据补全，校准（对照携程）（？月？号）——之前丰富也反馈这个问题~（能降低多少点？）
● 非民用机场：携程数据、oag 
3、三期搜索无结果从 7%降低到0（9月上线）
      待定……
      邻近城市、景点，劣质景点，县区、乡村数据：经纬度计算
      3.1：客户端Suggest入口增加推荐模块，包括历史热度和发现用户兴趣两个部分。（9月版本）
  	   ● 历史热度：用户在无任何历史输入记录的情况下，根据用户定位城市推荐聚类数据分析出来的城市，一周更新一次
    	   ● 用户兴趣：根据用户历史数据分析出用户可能要去的地点，有算法，要有数据。
                    没有输入的情况 或者 输入无结果的情况
              3.2：客户端 （9月版）
特殊字符（不发请求）
筛选出的结果，关键字高亮展
4、切www和touch的量
================================================================================
中期目标：提高命中率
原因：
1、输出的结果没有用户想要的
2、输出的结果展示的太靠后，用户不能一眼看到，继续输入
3、用户输入路径太长才能拿到想要的结果，不能以最快的速度拿到想要的结果
计划：
优化排序，灵活排序
分析用户数据，和用户输入路径看下如何优化~
================================================================================
后期目标：增加产品丰富度，提高用户体验
原因：
1、城市列表页用户选择太大，没有明确需求的用户无法锁定自己想去的城市
2、城市列表区域利用率不高
计划：
1、增加推荐区域，由大范围锁定小范围（区域内展开城市，能够尽快的锁定想要选的城市）
2、增加猜你喜欢、推荐等个性化产品
================================================================================


二期问题如下：
1）输入不全、区域+城市/景点等、地名+字母、火车站，这四种原本要解决的情况，除了匹配到我们想要的结果，还匹配出一批关联不大的结果
2）无机场城市、县、乡村等地名由于没有配置邻近，我们应该给用户推邻近，而现在会匹配出一批关联不大的结果
3）错字，现在匹配到一批关联不大的结果
case1：马拉西亚，由于国家优先级低，马来西亚出不来
case2：爱情海，出不来景点爱琴海
4）简称，例如阿联酋，由于基础数据没有简称，匹配出一批关联不大的结果
5）总体情况，所有无结果都会匹配出结果，准确性无法把控
建议：
1）参数调整的严一些，至少让包含两个及以上字符去进行匹配，用一个字匹配出的结果不要
2）qconfig加开关配置，可以调整针对这次优化出来item数目，例如问题1的情况第一条是用户最想要的，别的都不需要
3）其他要调整的方法还没想好



调整三点再看看效果：
1）（参数*用户输入的字符数）<2的按照2算，其他情况正常；
2）返回结果用编辑距离算法过滤一遍；
3）qconfig加条数配置，可以控制本次优化返回的条数。
调整完再自测一下吧~~~










用户最后一次输入有结果的量
要计算较为准确的命准率（用户点击/用户最后一次输入有结果的量）下面这个命中率有点小，在用户输入过程中有结果的量很多，但不一定无效，可能用户在输入~


再增加一个数据。
2、用户点击结果分布
点击有机场城市节点的量？点击机场节点的量？点击无机场城市节点的量？点击景点节点的量？点击省/州节点的量？点击国家节点的量？



麻烦重新洗一份城市列表的基础数据，包含以下点击城市列表的埋点，你看下~

Adr城市列表点击埋点：
1502792189172*onItemClick:LinearLayout*0*ContextImpl:/MainWindow/FrameLayout[0]/LinearLayout[0]/LinearLayout[1]/LinearLayout[0]/LinearLayout[1]/RelativeLayout[3]/AmazingListView[2]/LinearLayout[-]*多伦多:YTO 加拿大*1502792154764*1502792189155

Ios城市列表点击埋点：
QAVLog:click*2-5*FCityVC:in:/UIWindow[0_0_0_0]/RootVCController[0_0_0_0_#FFFFFFFF]/FCityVC[0_0_0_0_#EFEFF4FF]/FIndexTableView[0_1_0_0]/UITableViewPlainCell[-]*阿拉善左旗*0x7fbb0d305a00*1502850894756


selcet的嵌套  from(select name,salary,from patition_table)e selecet e.name,e.salary where e.salary>1000;

Hive只支持在FROM子句中使用子查询，子查询必须有名字，并且列必须唯一：
select * from (select id,devid,job_time from tb_in_base) a;


查看前几条  select * from tablename limit 1;  
在hive中不支持 select * from tablename limit 1 5;//1 to 5

order by 和 sort by   select * from order_test order by math; 注意:  order by 是做一个全局的排序，所有的数据发送到一个reduce上操作 set hive.mapred.mode=nonstrict //(默认值)  set hive.mapred.mode=strict //在该模式下必须指定limit

case when then 操作 select * case when salary,   case when salary <5000 then 'L1'     when salary >=5000 and salary <10000  then 'L2'    when salary >=10000 and salary <15000 then 'L3'    when salary >=15000 then 'L4'    else 'L0'    end    as salary_level,gender from patition_table;








click_search_content.txt
还有一个文件是用户点击的结果都有哪些输入可以出这个结果的，我看了下有点问题，输入这个“一一”，是无结果，没有“伊斯坦布尔”，你查下是不是取数据的时候写的有问题~



BX：每日保险数据相关报表制作
TTS：代理商票量查询








主机名	l-kola[1-8].f.dev.cn0
主机名	l-flight[1-8].wap.dev.cn0
KEY PASSPHRASE	>ku7:6zi?q=,?>0

l-kola2.f.dev.cn0

jdk 1.7  java开发/运行环境
maven  java 依赖管理 编译等
idea  java ide
git  代码仓库
SecureCRT   window系统登陆开发机

qtalk  公司内部通讯
邮箱   公司内部通讯
开发机权限  http://ops.corp.qunar.com/ops/account/  l-flight[1-8].wap.dev.cn0 l-kola[1-8].f.dev.cn0  sudo权限
gitlab   http://gitlab.corp.qunar.com/



git clone http://gitlab.corp.qunar.com/flightuser/incarnation.git
git branch -r
git checkout 20170622_init
git status
git checkout origin/master




git clone [url]
会默认创建一个远程仓库origin
git add
git status
git diff
git commit
git branch
git branch -D   删除本地分支
git log

git checkout -b 123 origin/master
新建的123与origin/master默认就有关联(--setupstream)!

git push  origin  :123
可以用于删除远程仓库origin的分支123

git push origin 123 --set-upstream
设置本地与远程仓库中分支的关联

git fetch origin
git reset --hard origin/master
丢弃本地所有改动与提交

git branch -vv（两个v），就能够看到本地分支跟踪的远程分支。

git branch --set-upstream master origin/next


mvn compile	编译源码
mvn test	执行test
mvn test-compile	编译测试代码，test可执行
mvn package	项目打包
mvn install	把project安装到本地的repository中，可作为本地其他项目的依赖
mvn site	为你的project创建一个站点
mvn clean	清除target目录下的所有文件
mvn eclipse:eclipse	为project生成eclipse的工程文件和classpath文件
mvn idea:idea	生成idea项目

mvn archetype:generate	创建mvn项目 
mvn archetype:create -DgroupId=com.oreilly -DartifactId=my-app	创建mvn项目
mvn jetty:run            运行项目于jetty上 
mvn -Dwtpversion=1.0 eclipse:eclipse        生成Wtp插件的Web项目 
mvn -Dwtpversion=1.0 eclipse:clean          清除Eclipse项目的配置信息(Web项目) 

组合使用goal命令，如只打包不测试：mvn -Dtest package
只打jar包：mvn jar:jar
只测试而不编译，也不测试编译：mvn test -skipping compile -skipping test-compile
清除eclipse的一些系统设置：mvn eclipse:clean

maven内置三种生命周期：default, clean 和 site。

default生命周期：
validate：validate the project is correct and all necessary information is available.
initialize：initialize build state, e.g. set properties or create directories.
generate-sources：generate any source code for inclusion in compilation.
process-sources：process the source code, for example to filter any values.
generate-resources：generate resources for inclusion in the package.
process-resources：copy and process the resources into the destination directory, ready for packaging.
compile：compile the source code of the project.
process-classes：post-process the generated files from compilation, for example to do bytecode enhancement on Java classes.
generate-test-sources：generate any test source code for inclusion in compilation.
process-test-sources：process the test source code, for example to filter any values.
generate-test-resources：create resources for testing.
process-test-resources：copy and process the resources into the test destination directory.
test-compile：compile the test source code into the test destination directory
process-test-classes：post-process the generated files from test compilation, for example to do bytecode enhancement on Java classes. For Maven 2.0.5 and above.
test：run tests using a suitable unit testing framework. These tests should not require the code be packaged or deployed.
prepare-package：perform any operations necessary to prepare a package before the actual packaging. This often results in an unpacked, processed version of the package. (Maven 2.1 and above)
package：take the compiled code and package it in its distributable format, such as a JAR.
pre-integration-test：perform actions required before integration tests are executed. This may involve things such as setting up the required environment.
integration-test：process and deploy the package if necessary into an environment where integration tests can be run.
post-integration-test：perform actions required after integration tests have been executed. This may including cleaning up the environment.
verify：run any checks to verify the package is valid and meets quality criteria.
install：install the package into the local repository, for use as a dependency in other projects locally.
deploy：done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.





Tomcat服务器的启动是基于一个server.xml文件的，Tomcat启动的时候首先会启动一个Server，Server里面就会启动Service，Service里面就会启动多个"Connector(连接器)"，每一个连接器都在等待客户机的连接，当有用户使用浏览器去访问服务器上面的web资源时，首先是连接到Connector(连接器)，Connector(连接器)是不处理用户的请求的，而是将用户的请求交给一个Engine(引擎)去处理，Engine(引擎)接收到请求后就会解析用户想要访问的Host，然后将请求交给相应的Host，Host收到请求后就会解析出用户想要访问这个Host下面的哪一个Web应用,一个web应用对应一个Context。



			Spring
控制反转，我们可以把它看作是一个概念。而依赖注入(Dependency Injection)是控制反转的一种实现方法。James Shore给出了依赖注入的定义：依赖注入就是将实例变量传入到一个对象中去(Dependency injection means giving an object its instance variables)。
setter注入(setter injection)和构造器注入(constructor injection)。


泛型注入？


Spring IoC容器：
BeanFactory（资源缺乏的移动设备时）和ApplicationContext（较高级目前常用,BeanFactory的派生类）
两个接口各自的实现类：
BeanFactory：XmlBeanFactory
ApplicationContext：FileSystemXmlApplicationContext，ClassPathXmlApplicationContext，WebXmlApplicationContext

xml配置文件基础内容：
<bean id="helloWorld" class="com.spring.HelloWorld">
        <property name="message" value="Hello World!"/>
</bean>

Bean的作用域：（scope=）
singleton，prototype，request，session，globalSession

一般说来，有状态的 bean 使用 prototype 作用域和没有状态的 bean 使用 singleton 作用域。

Bean后置处理器：BeanPostProcessor
实现该接口，包含两个方法，分别于实例化前后被回调。


依赖注入的一个实例：
从 TextEditor 中删除了全面控制，并且把它保存到其他地方（即 XML 配置文件），且依赖关系（即 SpellChecker 类）通过类构造函数被注入到 TextEditor 类中。因此，控制流通过依赖注入（DI）已经“反转”，因为你已经有效地委托依赖关系到一些外部系统。



@RequestMapping(value = "/student", method = RequestMethod.GET)
   public ModelAndView student() {
      return new ModelAndView("student", "command", new Student());
   }
第一个 service 方法 student()，我们已经在名称为 “command” 的 ModelAndView 对象中传递一个空的 Student 对象，因为 spring 框架需要一个名称的 “command” 的对象，如果你在 JSP 文件中使用 <form:form> 标签。所以，当 student() 方法被调用时，它返回 student.jsp 视图。







			Spring注解
@Autowired，其作用是为了消除代码Java代码里面的getter/setter与bean属性中的property。默认按类型匹配的方式，在容器查找匹配的Bean，当有且仅有一个匹配的Bean时，Spring将其注入@Autowired标注的变量中。
@Autowired
@Qualifier("personDaoBean") 存在多个实例配合使用（指定注入Bean的名称）

@Resource的装配顺序：
(1)、@Resource后面没有任何内容，默认通过name属性去匹配bean，找不到再按type去匹配
(2)、指定了name或者type则根据指定的类型去匹配bean
(3)、指定了name和type则根据指定的name和type去匹配bean，任何一个不匹配都将报错

然后，区分一下@Autowired和@Resource两个注解的区别：
(1)、@Autowired默认按照byType方式进行bean匹配，@Resource默认按照byName方式进行bean匹配
(2)、@Autowired是Spring的注解，@Resource是J2EE的注解，Spring属于第三方的，J2EE是Java自己的东西，因此，建议使用@Resource注解，以减少代码和Spring之间的耦合。

@Service注解对应的是业务层Bean，其实做了两件事情：
(1)、声明Zoo.java是一个bean，这点很重要，因为Zoo.java是一个bean，其他的类才可以使用@Autowired将Zoo作为一个成员变量自动注入。
(2)、Zoo.java在bean中的id是"zoo"，即类名且首字母小写。

@Component是所有受Spring 管理组件的通用形式，@Component注解可以放在类的头上，@Component不推荐使用。

@Controller对应控制层(表现层)的Bean，也就是Action。如果@Controller不指定其value【@Controller】，则默认的bean名字为这个类的类名首字母小写，如果指定value【@Controller(value="UserAction")】或者【@Controller("UserAction")】，则使用value作为bean的名字。

可以利用容器的scope="prototype"来保证每一个请求有一个单独的Action来处理，避免struts中Action的线程安全问题。spring 默认scope 是单例模式(scope="singleton")，这样只会创建一个Action对象，每次访问都是同一Action对象，数据不安全，struts2 是要求每次次访问都对应不同的Action，scope="prototype" 可以保证当有请求的时候都创建一个Action对象。

@Repository对应数据访问层Bean，即DAO。

使用注解之前要开启自动扫描功能
<context:component-scan base-package="cn.test"/> 

@Configuration把一个类作为一个IoC容器，它的某个方法头上如果注册了@Bean，就会作为这个Spring容器中的Bean。
@Lazy(true) 表示延迟初始化
@Scope用于指定scope作用域的（用在类上）
@PostConstruct用于指定初始化方法（用在方法上）
@PreDestory用于指定销毁方法（用在方法上）
@DependsOn：定义Bean初始化及销毁时的顺序
@Primary：自动装配时当出现多个Bean候选者时，被注解为@Primary的Bean将作为首选者，否则将抛出异常
@Async异步方法调用
@Transactional( rollbackFor={Exception.class}) 事务管理







        SpringMVC注解
@RequestMapping(value="/content",method="RequestMethod.GET",params="action=del",headers="Accept=application/json",consumes="application/json",produces="application/json")
属性params要求请求的URL中参数必须包含指定内容
属性headers要求请求头中必须包含指定参数
属性consumes指定处理请求的提交内容类型(Content-Type)
属性produces指定返回的内容类型(Accept)

@RequestParam用于将请求参数区数据映射到功能处理方法的参数上。
三个属性：value,required,defaultValue
public String requestparam4(@RequestParam(value="username",required=false) String username)

@PathVariable用于将请求URL中的模板变量映射到功能处理方法的参数上。
@RequestMapping(value="/users/{userId}/topics/{topicId}")
public String test(@PathVariable(value="userId") int userId, @PathVariable(value="topicId") int topicId) 

@ModelAttribute可以应用在方法参数上或方法上。他的作用主要是当注解在方法参数上时会将注解的参数对象添加到Model中；当注解在请求处理方法Action上时会将该方法变成一个非请求处理的方法，用于填充model属性，实际上控制器中的@ModelAttribute方法是在同一控制器中的所有@RequestMapping方法被调用之前调用的。
两种类型的@ModelAttribute方法。一种是：只加入一个属性，用方法的返回类型隐含表示(属性名称默认为返回类型首字母小写，亦可通过@ModelAttribute的value属性自定义)。另一种是：方法接受一个Model类型的参数，这个model可以加入任意多个model属性。
@Controller
@RequestMapping(value="/test")
public class TestController {
    @ModelAttribute//1
    public void populateModel(@RequestParam String abc, Model model) {
        model.addAttribute("attributeName", abc);
    }
    
    @RequestMapping(value = "/helloWorld")
    public String helloWorld() {
       return "test/helloWorld";
    }
}

@ModelAttribute//2
public User getUserInfo(String id){
    if(id!=null && !id.equals("")){
        return userService.getUserInfo(id);
    }
    return null;
}

@ModelAttribute和@RequestMapping可同时注释一个方法，这时这个方法的返回值并不是表示一个视图名称，而是model属性的值，视图名称由RequestToViewNameTranslator根据请求"/helloWorld"转换为helloWorld。


当@ModelAttribute注解用于方法参数时，它有了双重功能，即“存/取”。首先，它从模型中取出数据并赋予对应的参数，如果模型中尚不存在，则实例化一个，并存放于模型中；其次，一旦模型中已存在此数据对象，接下来一个很重要的步骤便是将请求参数或提交的表单绑定到此对象上（请求参数名映射对象属性名），这是Spring MVC提供的一个非常便利的机制--数据绑定。



类定义处标注@SessionAttributes：
可以使用两个属性types和value来指定要session化的ModelMap属性。
ModelMap中的属性默认的作用域是request级别。
@SessionAttributes("currUser")
将ModelMap中属性名为currUser的属性放到Session属性列表中，以便这个属性可以跨请求访问，在controller内部共享 model 属性。
@SessionAttributes需要清除时，使用SessionStatus.setComplete();来清除。



@Responsebody表示该方法的返回结果直接写入HTTP response body中。一般在异步获取数据时使用，在使用@RequestMapping后，返回值通常解析为跳转路径，加上@Responsebody后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中。比如异步获取json数据，加上@Responsebody后，会直接返回json数据。
@RequestBody将HTTP请求正文插入方法中,使用适合的HttpMessageConverter将请求体写入某个对象。

@RequestBody 将HTTP请求正文转换为适合的HttpMessageConverter对象。
@ResponseBody 将内容或对象作为 HTTP 响应正文返回，并调用适合HttpMessageConverter的Adapter转换对象，写入输出流。

@RequestBody作用： 
 i) 该注解用于读取Request请求的body部分数据，使用系统默认配置的HttpMessageConverter进行解析，然后把相应的数据绑定到要返回的对象上；
 ii) 再把HttpMessageConverter返回的对象数据绑定到 controller中方法的参数上。
使用时机：
A) GET、POST方式提时， 根据request header Content-Type的值来判断:
application/x-www-form-urlencoded， 可选（即非必须，因为这种情况的数据@RequestParam, @ModelAttribute也可以处理，当然@RequestBody也能处理）；
multipart/form-data, 不能处理（即使用@RequestBody不能处理这种格式的数据）；
其他格式， 必须（其他格式包括application/json, application/xml等。这些格式的数据，必须使用@RequestBody来处理）；
B) PUT方式提交时， 根据request header Content-Type的值来判断:
application/x-www-form-urlencoded， 必须；
multipart/form-data, 不能处理；
其他格式， 必须；
说明：request的body部分的数据编码格式由header部分的Content-Type指定；

@ResponseBody
作用：
	该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。
使用时机：
	返回的数据不是html标签的页面，而是其他某种格式的数据时（如json、xml等）使用；




		SpringMVC常用配置
web.xml:
配置前端控制器DispatcherServlet
<servlet>  
    <servlet-name>springMVC</servlet-name>  
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>  
    <init-param>  
        <param-name>contextConfigLocation</param-name>  
        <param-value>classpath:/springMVC.xml</param-value>  
    </init-param>  
    <load-on-startup>1</load-on-startup>  
</servlet>  
<servlet-mapping>  
    <servlet-name>springMVC</servlet-name>  
    <url-pattern>/</url-pattern>  
</servlet-mapping>

配置监听器，一般在Struts项目中会使用，SpringMVC一般不使用listener监听器来加载spring的配置文件，只使用DispatcherServlet来加载Spring的配置
<listener>   
  <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>   
</listener>


SpringMVC.xml：
	<!-- 自动扫描的包名 -->  
    <context:component-scan base-package="com.app,com.core,JUnit4" ></context:component-scan>  
      
    <!-- 默认的注解映射的支持，会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,是spring MVC为@Controllers分发请求所必须的。并提供了：数据绑定支持，@NumberFormatannotation支持，@DateTimeFormat支持，@Valid支持，读写XML的支持（JAXB），读写JSON的支持（Jackson）。 -->

    <mvc:annotation-driven />  


    <!-- 视图解释类 -->  
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
        <property name="prefix" value="/WEB-INF/jsp/"/>  
        <property name="suffix" value=".jsp"/><!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑  -->  
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />  
    </bean>  

    <!-- 拦截器：HandlerInterceptor接口，HandlerInterceptorAdapter适配器，实现这个接口或继承此类，可以非常方便的实现自己的拦截器。preHandle,postHandle,afterCompletion三个方法分别实现预处理、后处理（调用了Service并返回ModelAndView，但未进行页面渲染）、返回处理（已经渲染了页面）。
    Spring MVC的拦截器，是属于HandlerMapping级别的，可以有多个HandlerMapping ，每个HandlerMapping可以有自己的拦截器。一个请求交给一个HandlerMapping时，这个HandlerMapping先找有没有处理器来处理这个请求，如果找到了，就执行拦截器，执行完拦截后，交给目标处理器。如果没有找到处理器，那么这个拦截器就不会被执行。  -->  
    <mvc:interceptors>
        <bean class="com.core.mvc.MyInteceptor"/>
    </mvc:interceptors>


    <!-- 如果你的DispatcherServlet拦截"*.do"这样的有后缀的URL，就不存在访问不到静态资源的问题。如果你的DispatcherServlet拦截"/"，为了实现REST风格，拦截了所有的请求，那么同时对*.js,*.jpg等静态文件的访问也就被拦截了。
    对静态资源文件的访问：使用默认的Servlet来响应静态文件。把"/**" url,注册到SimpleUrlHandlerMapping的urlMap中,把对静态资源的访问由HandlerMapping转到org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler处理并返回.DefaultServletHttpRequestHandhandlerler使用就是各个Servlet容器自己的默认Servlet.  方案一 -->
    
    <mvc:default-servlet-/>    


    <!-- 对静态资源文件的访问：把mapping的URI注册到SimpleUrlHandlerMapping的urlMap中,key为mapping的URI pattern值,而value为ResourceHttpRequestHandler。由ResourceHttpRequestHandler进行处理静态资源的映射访问及返回。  方案二 -->  
    <mvc:resources mapping="/images/**" location="/images/" cache-period="31556926"/>  
    <mvc:resources mapping="/js/**" location="/js/" cache-period="31556926"/>  
    <mvc:resources mapping="/css/**" location="/css/" cache-period="31556926"/> 

    <!-- 要写在DispatcherServlet的前面，让defaultServlet先拦截请求，这样请求就不会进入Spring了。  方案三 -->
    <servlet-mapping>   
    	<servlet-name>default</servlet-name>  
    	<url-pattern>*.jpg</url-pattern>     
	</servlet-mapping>    
	<servlet-mapping>       
    	<servlet-name>default</servlet-name>    
    	<url-pattern>*.js</url-pattern>    
	</servlet-mapping>    
	<servlet-mapping>        
    	<servlet-name>default</servlet-name>       
    	<url-pattern>*.css</url-pattern>      
	</servlet-mapping>


	补充说明：多个HandlerMapping的执行顺序问题(优先执行order值较小的)：
	DefaultAnnotationHandlerMapping的order属性值是：0
	<mvc:resources/ >自动注册的SimpleUrlHandlerMapping的order属性值是：2147483646
	<mvc:default-servlet-handler/>自动注册的SimpleUrlHandlerMapping的order属性值是： 2147483647


	JUnit单元测试：JUnitActionBase类是所有JUnit的测试类的父类

	转发与重定向：redirect/forward:url	

	spring容器放在ServletContext中的key是org.springframework.web.servlet.FrameworkServlet.CONTEXT.springMVC。注意后面的springMVC，是你的servlet-name配置的值，注意适时修改。

	<!-- 用于持有ApplicationContext,可以使用SpringContextHolder.getBean('xxxx')的静态方法得到spring bean对象 -->
	<bean class="com.xxxxx.SpringContextHolder" lazy-init="false" />  














            Elasticsearch在curl中的用法：
查看全部索引：
curl -XGET http://10.86.41.155:9200/_cat/indices?v

curl -XGET http://10.86.41.155:9200/_count?pretty


查看集群

curl -XGET http://10.86.41.155:9200/_cat/health?v
查看node
curl -XGET http://10.86.41.155:9200/_cat/nodes?v

删除索引
curl -XDELETE http://10.86.41.155:9200/city_suggest


curl -X<VERB> '<PROTOCOL>://<HOST>:<PORT>/<PATH>?<QUERY_STRING>' -d '<BODY>'

在 Elasticsearch 中文档是 不可改变 的，不能修改它们。 相反，如果想要更新现有的文档，需要 重建索引 或者进行替换.

脚本可以在 update API中用来改变 _source 的字段内容， 它在更新脚本中称为 ctx._source
POST /website/blog/1/_update
{
   "script" : "ctx._source.views+=1"
}

{ action: { metadata }}\n
{ request body        }\n
{ action: { metadata }}\n
{ request body        }\n
...(bulk批量操作API)
每行一定要以换行符(\n)结尾， 包括最后一行.
action:create,index,update,delete.

curl -i -XPOST 'http://10.86.41.155:9200/website/blog/1/_update?pretty' -d '
{
   "script" : "ctx._source.tags+=new_tag",
   "param" : {
      "new_tag" : "search"
   }
}'
提示new_tag未定义？？？




curl -i -XGET 'http://10.86.41.155:9200/gb?pretty' -d '
{
    "query" : {
        "match_all" : {
        }
    },
    "sort": { "_id": { "order": "desc" }}
}'

curl -XGET http://10.86.41.155:9200/hot/_analyze?pretty -d '
{
   "analyzer":"ik_smart",
   "text":"张其张李"
}'



curl -XGET http://10.86.41.155:9200/website/blog/_search?pretty -d '
{
    "query": {
        "fuzzy" : {
            "title" : {
                "value" :         "external",
                    "boost" :         1.0,
                    "fuzziness" :     2,
                    "prefix_length" : 0,
                    "max_expansions": 100
            }
        }
    }
}'


curl -XGET http://10.86.41.155:9200/fuzzy_test4/blog/_search?pretty -d '
{
  "suggest" : {
    "my-suggestion" : {
      "text" : "your name",
      
      "term" : {
      "analyzer":"standard",
        "field" : "text",
        "suggest_mode":"missing"

      }
    }
  }
}'

curl -XPUT http://10.86.41.155:9200/fuzzy_test4/blog/4?refresh -d'
{
    "text" : {
        "input": [ "江苏", "jiangsu" ]
    }
}'
普通类型字段不接受数组，还是不行？只有completion索引才能接受？




curl -XGET http://10.86.41.155:9200/fuzzy_test4/blog/_search?pretty  -d'
{	
"size" : 10,
    "query" : {
        "match_all": {}
    }
}'

curl -XGET http://10.86.41.155:9200/fuzzy_test1/_search?pretty  -d'
{
    "query": {
        "prefix" : { "title" : "ex" }
    }
}'


curl -XGET http://10.86.41.155:9200/website/_search?pretty  -d'
{
    "query": {
        "fuzzy" : {
            "title" : {
                "value" :         "My second",
                    "boost" :         1.0,
                    "fuzziness" :     3,
                    "prefix_length" : 0,
                    "max_expansions": 100
            }
        }
    }
}'


curl -XGET http://10.86.41.155:9200/website/_search?pretty  -d'
{
    "query": {
        "exists" : { "field" : "date" }
    }
}'

curl -XPOST http://10.86.41.155:9200/fuzzy_test4/blog/6?pretty -d'
{
	"text":"name"
}'






模糊匹配completion索引建立及查询：

curl -XPUT http://10.86.41.155:9200/mohu?pretty -d'
{
    "mappings": {
        "song" : {
            "properties" : {
                "suggest" : {
                    "type" : "completion"
                }
            }
        }
    }
}'

curl -XPUT http://10.86.41.155:9200/mohu/song/1?refresh -d'
{
    "suggest" : {
        "input": [ "江苏", "jiangsu" ]
    }
}'


curl -XPOST http://10.86.41.155:9200/mohu/_search?pretty -d'
{
    "suggest": {
        "song-suggest" : {
            "text" : "jiang",
            "completion" : {
                "field" : "suggest",
                "fuzzy" : {
                    "fuzziness" : "2"
                }
            }
        }
    }
}'
索引内容：江苏，jiangsu
搜索成功：jiangsuh，江苏ha，江,jiengsu
搜索失败：江苏盐，江苏南京，江苏南，江河，苏，中国江苏
正常失败：江苏has


curl -XPOST http://10.86.41.155:9200/mohu/_search?pretty -d'
{
  "suggest" : {
    "my-suggestion" : {
      "text":"jiangsuh",
      "term":{
        "field" : "suggest",
        "max_edits":"2"
      }
    }
  }
}'
全都失败，甚至返回结果中text为空，是不是也与建立索引时字段类型为completion有关，感觉这个类型专用于completion suggestion

curl -XPOST http://10.86.41.155:9200/mohu/_search?pretty  -d'
{
    "query": {
        "fuzzy" : {
            "suggest" : {
                "value" : "jiangsuh",
                "fuzziness" : "2"
            }
        }
    }
}'
error！suggest字段类型为completion，不支持直接使用fuzzy查询






match方案解决模糊搜索：

curl -XPOST http://10.86.41.155:9200/fuzzy_test4/_search?pretty -d'
{
    "query": {
        "match" : {
            "text" : "加利福尼亚"
        }
    }
}'

插入数据
curl -XPOST http://10.86.41.155:9200/match_test/prod/1?pretty -d'
{
    "city_keyword" : "加利福尼亚"
}'
curl -XGET http://10.86.41.155:9200/match_test/_search?pretty  -d'
{	
"size" : 10,
    "query" : {
        "match_all": {}
    }
}'
curl -XPOST http://10.86.41.155:9200/match_test/_search?pretty -d'
{
    "query": {
        "match" : {
        	"_all" : {
                "query" : "califunia",
                "operator" : "or",
                "zero_terms_query": "all",
            	"minimum_should_match": "60%"
            }
        }
	}
}'


curl -XGET http://10.86.41.155:9200/_analyze?pretty -d'
{
  "analyzer" : "standard",
  "text" : "加利福呢呀"
}'

curl -XPOST http://10.86.41.155:9200/match_test/_search?pretty  -d'
{
    "query": {
        "fuzzy" : {
            "city_keyword" : {
                "value" : "加利福尼",
                "fuzziness" : "2"
            }
        }
    }
}'


自定义分析器(将单词或拼音分成单字符)：
curl -XPUT http://10.86.41.155:9200/my_ana?pretty -d'
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "my_tokenizer"
        }
      },
      
    }"tokenizer": {
        "my_tokenizer": {
          "type": "standard",
          "max_token_length": 1
        }
      }
  },
  "mappings": {
        "prod" : {
            "properties" : {
                "city_keyword" : {
                    "type" : "text",
                    "analyzer":"my_analyzer"
                },
                "name_en":{
                	"type":"text",
                	"analyzer":"my_analyzer"
                }
            }
        }
    }
}'

curl -XPOST http://10.86.41.155:9200/my_ana/prod/1?pretty -d'
{
    "city_keyword" : "江苏",
    "name_en":"jiangsu"
}'


curl -XGET http://10.86.41.155:9200/my_ana/_search?pretty  -d'
{	
"size" : 10,
    "query" : {
        "match_all": {}
    }
}'


curl -XPOST http://10.86.41.155:9200/my_ana/_search?pretty -d'
{
    "query": {
        "match" : {
        	"_all" : {
                "query" : "jaingsu",
                "operator" : "or",
                "zero_terms_query": "all",
            	"minimum_should_match": "60%"
            }
        }
	}
}'







curl -XPOST http://10.86.41.155:9200/my_ana/_search?pretty -d'
{
    "query": {
        "multi_match" : {
                "query" : "ijenhisu",
                "type":"best_fields",
                "fields":["city_keyword","name_en"],
            	"minimum_should_match": "60%"
        }
	}
}'


curl -XPOST http://10.86.41.155:9200/my_ana/_analyze?pretty -d'
{
  "analyzer": "my_analyzer",
  "text": "加利福尼亚"
}'


mutli-match API:
QueryBuilder qb = multiMatchQuery(
    "kimchy elasticsearch", 
    "user", "message"       
);




curl http://100.81.128.111:8080/suggest/query?queryStr=南京&indexName=""&typeName=""





"shanghai|New york|SH| 上海|SHA|1|中国||上海" => "上海"

SHA,上海虹桥国际机场,虹桥机场,Shanghai Hongqiao International Airport,shanghaihongqiaoguojijichang,hongqiaojichang => 虹桥机场
PVG，上海浦东国际机场，浦东机场，Shanghai Pudong International Airport，shanghaipudongguojijichang，pudongjichang => 浦东机场



城市三字码/机场三字码
城市中文名/机场中文名
机场中文简称
城市拼音全称/机场拼音全称            =>           虹桥机场
城市拼音简写/机场拼音简写
城市英文名／机场英文名
place


		private String nameEn;
        private String namePy;
        private String pyShort;
        private String nameCn;
        private String cityCode;
        private String cnShort;
        private CityInfoSimple.Place place;


multimatch_city_suggest_201708151411

curl -XPOST http://10.86.41.155:9200/multimatch_city_suggest_defaulf/_search?pretty -d'
{
	"from":0,
	"size":10,
    "query": {
        "multi_match" : {
                "query" : "shanya",
                "type":"best_fields",
                "fields":["nameEn","namePy","pyShort","nameCn","cityCode","cnShort"],
            	"minimum_should_match": "70%"
        }
	  }
}'

curl -XPOST http://10.86.41.155:9200/multimatch_city_suggest_201708151411/_analyze?pretty -d'
{
  "analyzer": "myAnalyzer3",
  "text": "加利福尼亚"
}'

curl -XGET http://10.86.41.155:9200/multimatch_city_suggest_201708151411/_search?pretty  -d'
{	
"size" : 5,
    "query" : {
        "match_all": {}
    }
}'


热发文件路径：/home/q/www/incarnation/cache/qconfig/f_incarnation/snapshot2


三点改善：
编辑路径过滤结果
新功能展示条数热发
匹配百分比换为具体数字，小于2的情况转换为2



测试case：（已解决）
山西达州	→	达州没出来，同时还会出现部分大于指定编辑距离的结果（根据curl的结果顺序，达州还是比较靠前的，比较费解，而且山西运城的话运城是可以出来的）
广南	→	转换为拼音，匹配的第一个却是annan，单拿出来转换拼音可以发现第一个拼音确实是guangnan，费解






cat incarnation/startenv.sh
sudo ../tools/bin/restart_tomcat.sh incarnation/









dubbo直连：
<dubbo:reference loadbalance="random" id="citySuggestApi" url="dubbo://10.86.46.111:21000/com.qunar.flight.mobile.lion.inter.itf.city_suggest_api.CitySuggestApi" interface="com.qunar.flight.mobile.lion.inter.itf.city_suggest_api.CitySuggestApi" version="1.0" timeout="1000" check="false" retries="0"/>




自动化测试脚本：
#!/bin/bash

for line in `cat suggestInput.txt`
do
        echo $line
        #echo \'$line\' |tr -d '\n' |od -An -tx1|tr ' ' %
        line1=`echo $line |tr -d '\n' |od -An -tx1|tr ' ' %|tr -d '\n'`
        echo $line1
        #echo http://l-kola2.f.dev.cn0.qunar.com/fca?qrt=f_r_placeSuggest\&b=\\\{\"queryWord\":\"${line1}\"\\\}\&c=\\\{\"adid\":\"dc5f00fedc31c70b\",\"brush\":\"\\\{\\\"lt\\\":\\\"0\\\"\\\}\",\"cas\":\"com.mqunar.atom.flight_128\",\"catom\":\"com.mqunar.atom.flight_128\",\"cid\":\"beta\",\"gid\":\"7B238A0A-1FA4-5BE4-A9B9-94EF7903EC72\",\"hk\":\"0\",\"ip\":\"100.81.137.89\",\"ke\":\"1499349454260\",\"lat\":\"40.051928\",\"lgt\":\"116.363059\",\"ma\":\"bc:3a:ea:0d:79:1d\",\"mno\":\"\",\"model\":\"OPPOR7\",\"msg\":\"\",\"nt\":\"\",\"osVersion\":\"4.4.4_19\",\"pid\":\"10010\",\"pitcherTid\":\"pf_pitcher_170706.215733.10.86.47.127.7394.5259476_1\",\"port\":\"45320\",\"ref\":\"\",\"sid\":\"E9D806A8-2472-980E-92F3-82EC7F453D19\",\"t\":\"f_r_placeSuggest\",\"tsv\":\"23\",\"uid\":\"867148021257117\",\"un\":\"\",\"usid\":\"\",\"vid\":\"80011150\"\\\}\&ext=\"\">>suggestRequest.txt
        curl -X POST http://l-kola2.f.dev.cn0.qunar.com/fca?qrt=f_r_placeSuggest\&b=\\\{\"queryWord\":\"${line1}\"\\\}\&c=\\\{\"adid\":\"dc5f00fedc31c70b\",\"brush\":\"\\\{\\\"lt\\\":\\\"0\\\"\\\}\",\"cas\":\"com.mqunar.atom.flight_128\",\"catom\":\"com.mqunar.atom.flight_128\",\"cid\":\"beta\",\"gid\":\"7B238A0A-1FA4-5BE4-A9B9-94EF7903EC72\",\"hk\":\"0\",\"ip\":\"100.81.137.89\",\"ke\":\"1499349454260\",\"lat\":\"40.051928\",\"lgt\":\"116.363059\",\"ma\":\"bc:3a:ea:0d:79:1d\",\"mno\":\"\",\"model\":\"OPPOR7\",\"msg\":\"\",\"nt\":\"\",\"osVersion\":\"4.4.4_19\",\"pid\":\"10010\",\"pitcherTid\":\"pf_pitcher_170706.215733.10.86.47.127.7394.5259476_1\",\"port\":\"45320\",\"ref\":\"\",\"sid\":\"E9D806A8-2472-980E-92F3-82EC7F453D19\",\"t\":\"f_r_placeSuggest\",\"tsv\":\"23\",\"uid\":\"867148021257117\",\"un\":\"\",\"usid\":\"\",\"vid\":\"80011150\"\\\}\&ext=\"\"
done